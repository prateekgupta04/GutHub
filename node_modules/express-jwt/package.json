{
  "name": "express-jwt",
  "version": "0.5.1",
  "description": "JWT authentication middleware.",
  "keywords": [
    "auth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "http",
    "jwt",
    "token",
    "oauth",
    "express"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/auth0/express-jwt.git"
  },
  "bugs": {
    "url": "http://github.com/auth0/express-jwt/issues"
  },
  "author": {
    "name": "Matias Woloski",
    "email": "matias@auth0.com",
    "url": "https://www.auth0.com/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "express-unless": "0.0.0",
    "jsonwebtoken": "~1.2.0"
  },
  "devDependencies": {
    "mocha": "1.x.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha --reporter spec"
  },
  "readme": "# express-jwt\n\n[![Build](https://travis-ci.org/auth0/express-jwt.png)](http://travis-ci.org/auth0/express-jwt)\n\nMiddleware that validates JsonWebTokens and sets `req.user`.\n\nThis module lets you authenticate HTTP requests using JWT tokens in your Node.js\napplications.  JWTs are typically used protect API endpoints, and are\noften issued using OpenID Connect.\n\n## Install\n\n    $ npm install express-jwt\n\n## Usage\n\nThe JWT authentication middleware authenticates callers using a JWT.\nIf the token is valid, `req.user` will be set with the JSON object decoded\nto be used by later middleware for authorization and access control.\n\nFor example,\n\n```javascript\nvar jwt = require('express-jwt');\n\napp.get('/protected',\n  jwt({secret: 'shhhhhhared-secret'}),\n  function(req, res) {\n    if (!req.user.admin) return res.send(401);\n    res.send(200);\n  });\n```\n\nYou can specify audience and/or issuer as well:\n\n```javascript\njwt({ secret: 'shhhhhhared-secret',\n  audience: 'http://myapi/protected',\n  issuer: 'http://issuer' })\n```\n\n> If the JWT has an expiration (`exp`), it will be checked.\n\nOptionally you can make some paths unprotected as follows:\n\n```javascript\napp.use(jwt({ secret: 'shhhhhhared-secret'}).unless({path: ['/token']}));\n```\n\nThis is especially useful when applying to multiple routes.\n\nThis module also support tokens signed with public/private key pairs. Instead of a secret, you can specify a Buffer with the public key\n\n```javascript\nvar publicKey = fs.readFileSync('/pat/to/public.pub');\njwt({ secret: publicKey });\n```\n\nBy default, the decoded token is attached to `req.user` but can be configured with the `userProperty` option.\n\n```javascript\njwt({ secret: publicKey, userProperty: 'auth' });\n```\n\n\n### Error handling\n\nThe default behavior is to throw an error when the token is invalid, so you can add your custom logic to manage unauthorized access as follows:\n\n\n```javascript\napp.use(function (err, req, res, next) {\n  if (err.name === 'UnauthorizedError') {\n    res.send(401, 'invalid token...');\n  }\n});\n```\n\nYou might want to use this module to identify registered users without preventing unregistered clients to access to some data, you\ncan do it using the option _credentialsRequired_:\n\n    app.use(jwt({ \n      secret: 'hello world !',\n      credentialsRequired: false\n    }));\n\n## Related Modules\n\n- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) â€” JSON Web Token sign and verification\n\n## Issue Reporting\n\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n- @jfromaniello ([20 contributions](https://github.com/auth0/express-jwt/commits?author=jfromaniello))\n- @woloski ([16 contributions](https://github.com/auth0/express-jwt/commits?author=woloski))\n- @aaronogle ([3 contributions](https://github.com/auth0/express-jwt/commits?author=aaronogle))\n- @mck- ([3 contributions](https://github.com/auth0/express-jwt/commits?author=mck-))\n- @CLevasseur ([2 contributions](https://github.com/auth0/express-jwt/commits?author=CLevasseur))\n- @wiherek5 ([1 contributions](https://github.com/auth0/express-jwt/commits?author=wiherek5))\n- @davis ([1 contributions](https://github.com/auth0/express-jwt/commits?author=davis))\n- @godeatgod ([1 contributions](https://github.com/auth0/express-jwt/commits?author=godeatgod))\n- @nkcmr ([1 contributions](https://github.com/auth0/express-jwt/commits?author=nkcmr))\n- @philosoralphter ([1 contributions](https://github.com/auth0/express-jwt/commits?author=philosoralphter))\n- @iamsebastian ([1 contributions](https://github.com/auth0/express-jwt/commits?author=iamsebastian))\n- @tonytamps ([1 contributions](https://github.com/auth0/express-jwt/commits?author=tonytamps))\n- @dannyrscott ([1 contributions](https://github.com/auth0/express-jwt/commits?author=dannyrscott))\n- @dschenkelman ([1 contributions](https://github.com/auth0/express-jwt/commits?author=dschenkelman))\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Auth0 <[http://auth0.com](http://auth0.com)>\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/auth0/express-jwt",
  "_id": "express-jwt@0.5.1",
  "dist": {
    "shasum": "ca520ccaf56028b7cbb59b89bcfb217dbc98b3ee"
  },
  "_from": "express-jwt@",
  "_resolved": "https://registry.npmjs.org/express-jwt/-/express-jwt-0.5.1.tgz"
}
